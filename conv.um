
import (
	"std.um"								
)

fn getc(): char {
	out := ' '
	if scanf("%c", &out) == 0 {
		return char(0)
	}
	return out
}

fn parse*(): [][]int {
	out := make([][]int, 128)

	for true {
		c := int(getc())
		if c == 0 || c == 32 { break }	
		out[c] = make([]int, 25)
		getc()
		i := 0
		for i < 25 {
			c2 := getc()
			if c2 == '\n' { continue }
			if c2 == '#' { out[c][i] = 1 }
			i++
		}
		getc()
		if getc() == char(0) {
			break
		}
		if c == int('\n') {
			out[c] = []int{}
		}
	}

	out[0x20] = make([]int, 25)
	return out
}

fn main() {
	if std.argc() != 2 {
		printf("conv.um [normal|minimal]\n")
		return
	}

	mode := std.argv(1)

	data := parse()
	printf("#ifndef PIXELFONT_H\n#define PIXELFONT_H\n")

	if mode == "normal" {
		printf("static char pixelfont[128][25] = {\n")
		for i,l in data {
			if len(l) == 0 { continue }
			s := str(char(i))
			if char(i) == '\'' || char(i) == '\\' {
				s = "\\" + s
			}

			printf("\t[\'%s\'] = { ", s)
			for j,b in l {
				printf("%d,", b)
			}
			printf(" },\n")
		}
	} else if mode == "minimal" {
		printf("static int pixelfont[] = {\n")
		for i,l in data {
			if len(l) == 0 { continue }
			s := str(char(i))
			if char(i) == '\'' || char(i) == '\\' {
				s = "\\" + s
			}
			printf("\t[\'%s\'] = ", s)

			n := 0
			for i:=24; i >= 0; i-- {
				n += l[i]
				n = n << 1
			}
			printf("%d,\n", n)
		}
	} else {
		printf("invalid mode. modes are: normal and minimal\n")
		return
	}
	printf("};\n#endif\n")
}
